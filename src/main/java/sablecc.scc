Helpers
    all_chars = [ 0 .. 65535 ];
    first_digit = ['1' .. '9'];
    digit = ['0' + first_digit];
    underscore = '_';
    not_a_digit = [underscore + [['a' .. 'z'] + ['A' .. 'Z']]];
    number = digit+;

    cr = 13;
    lf = 10;
    next_line = 0x85;
    line_separator = 0x2028;
    paragraph_separator = 0x2029;
    newline = cr | lf | cr lf | next_line | line_separator | paragraph_separator;
    newline_chars = [[[[ cr + lf ] + next_line ] + line_separator ] + paragraph_separator ];
    input_char = [ all_chars - newline_chars ];
    input_chars = input_char+;
    not_slash_input_char = [ input_char - '/'];

    tab = 9;
    all_but_star = [all_chars - '*'];
    all_but_star_and_slash = [all_but_star - '/'];

    string_literal_char = [all_chars - '"'];
    string_literal = '"' string_literal_char* '"';

Tokens
    // static names
    public = 'public';
    using_symbol = 'using_symbol';
    system_symbol = 'System';
    namespace_symbol = 'namespace';
    class_symbol = 'class';
    semicolon = ';';
    static_symbol = 'static';
    void_symbol = 'void';
    main_symbol = 'Main';
    console = 'Console';
    writeline = 'WriteLine';
    dot = '.';
    comma = ',';

    // comments
    one_line_comment = '//' (not_slash_input_char input_chars?)?;
    block_comment = '/*' all_but_star* '*'+ (all_but_star_and_slash all_but_star* '*'+)* '/';

    // literals
    int_symbol = 'int';
    double_symbol = 'double';
    string_symbol = 'string';
    bool_symbol = 'bool';
    true = 'true';
    false = 'false';
    double_value = number? '.' number;
    int_value = number;
    string_literal = string_literal;

    //unary operations
    log_not = '!';

    // operations
    mul = '*';
    div = '/';
    mod = '%';
    plus = '+';
    minus = '-';

    // relop
    lt = '<';
    lteq = '<=';
    gt = '>';
    gteq = '>=';
    eq = '==';
    neq = '!=';

    // bools
    log_and = '&&';
    log_or = '||';

    if = 'if';
    else ='else';
    return_symbol = 'return';
    l_brace = '{';
    r_brace = '}';
    l_par = '(';
    r_par = ')';
    l_bracket = '[';
    r_bracket = ']';
    equals = '=';


    whitespace = (cr | lf | tab | ' ')+;

    identifier = not_a_digit (digit | not_a_digit)*;
    number = number;

Ignored Tokens
    whitespace,
    one_line_comment,
    block_comment;

Productions
    // program structure, that is ALWAYS the same
    start = using_symbol system_symbol semicolon
            namespace_symbol [namespace_identifier]:identifier
            l_brace class_symbol [class_identifier]:identifier
                code_block
            r_brace;
    
    code_block = l_brace
                    decl_or_def*
                 r_brace;

    // every declaration of functions, variables etc.
    // one main function MUST exist
    decl_or_def =   [before_main]:non_main*
                    main_function
                    [after_main]:non_main*;

    // main method, needs exist
    main_function = static_symbol void_symbol main_symbol l_par string_symbol l_bracket r_bracket identifier r_par l_brace void_method r_brace;
    
    non_main =
    {function} function_decl |
    {var_decl} var_decl;

    function_decl = static_symbol function;

    function =
    {void_func}     void_func_decl      |
    {int_func}      int_func_decl       |
    {double_func}   double_func_decl    |
    {bool_func}     bool_func_decl      |
    {string_func}   string_func_decl;

    void_func_decl = void_symbol identifier l_par parameter_list r_par l_brace void_method r_brace;
    int_func_decl = int_symbol identifier l_par parameter_list r_par l_brace int_method r_brace;
    double_func_decl = double_symbol identifier l_par parameter_list r_par l_brace double_method r_brace;
    bool_func_decl = bool_symbol identifier l_par parameter_list r_par l_brace bool_method r_brace;
    string_func_decl = string_symbol identifier l_par parameter_list r_par l_brace string_method r_brace;

    void_method = void_content*;
    void_content =
    {var_decl} var_decl |
    {statement} statement* |
    {return} return_symbol semicolon;

    //TODO
    int_method = int_symbol;
    double_method = double_symbol;
    bool_method = bool_symbol;
    string_method = string_symbol;

    parameter_list = parameter parameter_list_tail?;
    parameter_list_tail = comma parameter parameter_list_tail?;
    parameter =
    {int}   int_symbol identifier       |
    {double} double_symbol identifier   |
    {bool} bool_symbol identifier       |
    {string} string_symbol identifier;


    //TODO
    statement = string_literal;

    var_decl =
    {integer_decl}   int_symbol identifier equals int_value semicolon           |
    {double_decl}    double_symbol identifier equals double_value semicolon     |
    {bool_decl}      bool_symbol identifier equals bool_value                   |
    {string_decl}    string_symbol identifier equals string_literal semicolon;

    //TODO: {calc}
    bool_value =
    {true} true |
    {false} false;