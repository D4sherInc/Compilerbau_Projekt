Helpers
    all_chars = [ 0 .. 65535 ];
    first_digit = ['1' .. '9'];
    digit = ['0' + first_digit];
    underscore = '_';
    not_a_digit = [underscore + [['a' .. 'z'] + ['A' .. 'Z']]];
    number = digit+;

    cr = 13;
    lf = 10;
    next_line = 0x85;
    line_separator = 0x2028;
    paragraph_separator = 0x2029;
    newline = cr | lf | cr lf | next_line | line_separator | paragraph_separator;
    newline_chars = [[[[ cr + lf ] + next_line ] + line_separator ] + paragraph_separator ];
    input_char = [ all_chars - newline_chars ];
    input_chars = input_char+;
    not_slash_input_char = [ input_char - '/'];

    tab = 9;
    all_but_star = [all_chars - '*'];
    all_but_star_and_slash = [all_but_star - '/'];

    string_literal_char = [all_chars - '"'];
    string_literal = '"' string_literal_char* '"';

Tokens
    // static names
    public = 'public';
    using_symbol = 'using_symbol';
    system_symbol = 'System';
    namespace_symbol = 'namespace';
    class_symbol = 'class';
    semicolon = ';';
    static_symbol = 'static';
    void_symbol = 'void';
    main_symbol = 'Main';
    console = 'Console';
    writeline = 'WriteLine';
    dot = '.';
    comma = ',';

    // comments
    one_line_comment = '//' (not_slash_input_char input_chars?)?;
    block_comment = '/*' all_but_star* '*'+ (all_but_star_and_slash all_but_star* '*'+)* '/';

    // literals
    int = 'int';
    double = 'double';
    string = 'string';
    bool = 'bool';
    true = 'true';
    false = 'false';
    double_value = number? '.' digit+;
    int_value = number;
    string_literal = string_literal;

    //unary operations
    log_not = '!';

    // operations
    mul = '*';
    div = '/';
    mod = '%';
    plus = '+';
    minus = '-';

    // relop
    lt = '<';
    lteq = '<=';
    gt = '>';
    gteq = '>=';
    eq = '==';
    neq = '!=';

    // bools
    log_and = '&&';
    log_or = '||';

    if = 'if';
    else ='else';
    return = 'return';
    l_brace = '{';
    r_brace = '}';
    l_par = '(';
    r_par = ')';
    l_bracket = '[';
    r_bracket = ']';
    equals = '=';


    whitespace = (cr | lf | tab | ' ')+;

    identifier = not_a_digit (digit | not_a_digit)*;
    number = number;

Ignored Tokens
    whitespace,
    one_line_comment,
    block_comment;


Productions
    // program structure, that is ALWAYS the same
    start = using_symbol system_symbol semicolon
            namespace_symbol [namespace_identifier]:identifier
            l_brace class_symbol [class_identifier]:identifier
                code_block
            r_brace;
    
    code_block = l_brace
                    decl_or_def*
                 r_brace;


